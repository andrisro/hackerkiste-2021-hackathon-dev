name: 'Hackathon'
on: [push]

jobs:
  terraform:
    name: 'Terraform'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    outputs:
      aks: ${{ steps.tfout.outputs.aks }}
      rg: ${{ steps.tfout.outputs.rg }}
      acr_name: ${{ steps.tfout.outputs.acr_name }}
      acr_url: ${{ steps.tfout.outputs.acr_url }}
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    - run: terraform init
    
    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -out=terraform.tfplan

    - name: Terraform Apply
      id: apply
      # if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve -no-color terraform.tfplan

    - name: Terraform Outputs
      id: tfout
      run: |
        tf=$(terraform output -no-color -json)
        echo "::set-output name=rg::$(echo $tf | jq -r .resource_group_name.value)"
        echo "::set-output name=aks::$(echo $tf | jq -r .aks_name.value)"
        echo "::set-output name=acr_name::$(echo $tf | jq -r .acr_name.value)"
        echo "::set-output name=acr_url::$(echo $tf | jq -r .acr_url.value)"

  container:
    name: 'Container Build'
    needs: terraform
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        #working-directory: ./container
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Docker Login to Registry
        run: |
          az acr login --name ${{ needs.terraform.outputs.acr_name }}

      # Build Old NGINX Frontend
      - name: Build NGING Base Frontend
        run: docker build -t ${{ needs.terraform.outputs.acr_url }}/nginx:latest ./container

      - name: Push NGING Base Frontend
        run: docker push ${{ needs.terraform.outputs.acr_url }}/nginx:latest

      # Build Frontend
      - name: Build Frontend
        run: docker build -t ${{ needs.terraform.outputs.acr_url }}/frontend-nginx:latest ./frontend

      - name: Push Frontend
        run: docker push ${{ needs.terraform.outputs.acr_url }}/frontend-nginx:latest

      # Build Java Example Backend
      - name: Build Java Example Backend
        run: docker build -t ${{ needs.terraform.outputs.acr_url }}/java-docker-backend-example:latest ./backend/java-docker

      - name: Push Java Example Backend
        run: docker push ${{ needs.terraform.outputs.acr_url }}/java-docker-backend-example:latest

      # Build Golang Example Backend
      - name: Build Go Example Backend
        run: docker build -t ${{ needs.terraform.outputs.acr_url }}/go-docker-backend-example:latest ./backend/go-docker

      - name: Push Go Example Backend
        run: docker push ${{ needs.terraform.outputs.acr_url }}/go-docker-backend-example:latest

  kubernetes:
    name: 'Kubernetes'
    needs: terraform
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: ./kubernetes
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Environemnt
        run: |
          az aks get-credentials --resource-group ${{ needs.terraform.outputs.rg }} --name ${{ needs.terraform.outputs.aks }}

      - name: "Add Helm Repo"
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx

      - name: "Update Helm Repo"
        run: |
          helm repo update

      - name: "Install Ingress Controller"
        run: |
          helm upgrade ingress-nginx ingress-nginx/ingress-nginx --install --create-namespace --namespace ingress-controller

      - name: Deploy Manifests
        run: |
          kubectl apply --server-side -f ./